complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
debugSource('~/Projects/RCoursera/complete.R')
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases'
result <- data.frame(row.names = 1:length(id))
#result <- data.frame()
for (i in id) {
i <- formatC(i,digits = 2,format = "d",flag = 0)
fileName <- paste(directory,"/",i,".csv",sep ="")
file <- read.csv(fileName)
idVector <- vector()
nobsVector <- vector()
count <-0
colnum <- nrow(file)
for (j in 1:colnum) {
currentCol <- file[j,]
if(!any(is.na(currentCol))){
count <- count +1
}
}
#result[i] <- count
#idVector <- c(idVector,i)
nobsVector<- c(nobsVector,count)
#result$id <- i
#result$nobs <- count
}
#data.frame(result,row.names = c("id","nobs"))
result$id <- id
result$nobs <- nobsVector
result
}
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
debugSource('~/Projects/RCoursera/complete.R')
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
nobsVector<- c(nobsVector,count)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases'
result <- data.frame(row.names = 1:length(id))
#result <- data.frame()
for (i in id) {
i <- formatC(i,digits = 2,format = "d",flag = 0)
fileName <- paste(directory,"/",i,".csv",sep ="")
file <- read.csv(fileName)
count <-0
colnum <- nrow(file)
nobsVector <- vector(length = colnum)
for (j in 1:colnum) {
currentCol <- file[j,]
if(!any(is.na(currentCol))){
count <- count +1
}
}
#result[i] <- count
#idVector <- c(idVector,i)
nobsVector<- c(nobsVector,count)
#result$id <- i
#result$nobs <- count
}
#data.frame(result,row.names = c("id","nobs"))
result$id <- id
result$nobs <- nobsVector
result
}
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
nobsVector <- vector(length = length(id))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases'
result <- data.frame(row.names = 1:length(id))
#result <- data.frame()
for (i in id) {
i <- formatC(i,digits = 2,format = "d",flag = 0)
fileName <- paste(directory,"/",i,".csv",sep ="")
file <- read.csv(fileName)
count <-0
colnum <- nrow(file)
nobsVector <- vector(length = length(id))
for (j in 1:colnum) {
currentCol <- file[j,]
if(!any(is.na(currentCol))){
count <- count +1
}
}
#result[i] <- count
#idVector <- c(idVector,i)
nobsVector<- c(nobsVector,count)
#result$id <- i
#result$nobs <- count
}
#data.frame(result,row.names = c("id","nobs"))
result$id <- id
result$nobs <- nobsVector
result
}
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
count <- count +1
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases'
result <- data.frame(row.names = 1:length(id))
#result <- data.frame()
for (i in id) {
i <- formatC(i,digits = 2,format = "d",flag = 0)
fileName <- paste(directory,"/",i,".csv",sep ="")
file <- read.csv(fileName)
count <-0
colnum <- nrow(file)
nobsVector <- vector(length = length(id))
for (j in 1:colnum) {
currentCol <- file[j,]
if(!any(is.na(currentCol))){
count <- count +1
}
}
#result[i] <- count
#idVector <- c(idVector,i)
nobsVector[i]<- count
#result$id <- i
#result$nobs <- count
}
#data.frame(result,row.names = c("id","nobs"))
result$id <- id
result$nobs <- nobsVector
result
}
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
debugSource('~/Projects/RCoursera/complete.R')
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
colnum <- nrow(file)
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases'
result <- data.frame(row.names = 1:length(id))
nobsVector <- vector(length = length(id))
#result <- data.frame()
for (i in id) {
i <- formatC(i,digits = 2,format = "d",flag = 0)
fileName <- paste(directory,"/",i,".csv",sep ="")
file <- read.csv(fileName)
count <-0
colnum <- nrow(file)
for (j in 1:colnum) {
currentCol <- file[j,]
if(!any(is.na(currentCol))){
count <- count +1
}
}
#result[i] <- count
#idVector <- c(idVector,i)
nobsVector[i]<- count
#result$id <- i
#result$nobs <- count
}
#data.frame(result,row.names = c("id","nobs"))
result$id <- id
result$nobs <- nobsVector
result
}
colnum <- nrow(file)
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
debugSource('~/Projects/RCoursera/complete.R')
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
complete <- function(directory, id = 1:332) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'id' is an integer vector indicating the monitor ID numbers
## to be used
## Return a data frame of the form:
## id nobs
## 1  117
## 2  1041
## ...
## where 'id' is the monitor ID number and 'nobs' is the
## number of complete cases'
result <- data.frame(row.names = 1:length(id))
nobsVector <- vector()
#result <- data.frame()
for (i in id) {
i <- formatC(i,digits = 2,format = "d",flag = 0)
fileName <- paste(directory,"/",i,".csv",sep ="")
file <- read.csv(fileName)
count <-0
colnum <- nrow(file)
for (j in 1:colnum) {
currentCol <- file[j,]
if(!any(is.na(currentCol))){
count <- count +1
}
}
#result[i] <- count
#idVector <- c(idVector,i)
nobsVector[i]<- count
#result$id <- i
#result$nobs <- count
}
#data.frame(result,row.names = c("id","nobs"))
result$id <- id
result$nobs <- nobsVector
result
}
complete("/Users/randyjp/Projects/RCoursera/specdata", c(2, 4, 8, 10, 12))
complete("/Users/randyjp/Projects/RCoursera/specdata", 30:25
v
complete("/Users/randyjp/Projects/RCoursera/specdata", 30:25)
complete("/Users/randyjp/Projects/RCoursera/specdata", 3)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
id <- 1:3
for (i in id) {
i <- formatC(i,digits = 2,format = "d",flag = 0)
fileName <- paste(directory,"/",i,".csv",sep ="")
file <- read.csv(fileName)
complete.cases(file)
}
}
corr("/Users/randyjp/Projects/RCoursera/specdata")
testfile <- read.csv("/Users/randyjp/Projects/RCoursera/specdata/001.csv")
vec <- complete.cases(testfile)
testfile[vec]
testfile[,vec]
testfile[vec,]
?cor
cor(testfile$nitrate,testfile$sulfate)
cor(testfile$nitrate,testfile$sulfate,na.rm=TRUE)
debugSource('~/Projects/RCoursera/corr.R')
corr("/Users/randyjp/Projects/RCoursera/specdata")
corr("/Users/randyjp/Projects/RCoursera/specdata",400)
debugSource('~/Projects/RCoursera/corr.R')
debugSource('~/Projects/RCoursera/corr.R')
fileName <- paste(directory,"/",i,".csv",sep ="")
debugSource('~/Projects/RCoursera/corr.R')
corr("/Users/randyjp/Projects/RCoursera/specdata",400)
debugSource('~/Projects/RCoursera/corr.R')
corr("/Users/randyjp/Projects/RCoursera/specdata",400)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
id <- 1:3
result <- c()
for (i in id) {
i <- formatC(i,digits = 2,format = "d",flag = 0)
fileName <- paste(directory,"/",i,".csv",sep ="")
file <- read.csv(fileName)
vec <- complete.cases(file)
complete_file <- file[vec,]
if(nrow(complete_file)>threshold){
result <- c(result,cor(complete_file$nitrate,complete_file$sulfate))
}
}
result
}
corr("/Users/randyjp/Projects/RCoursera/specdata",400)
corr <- function(directory, threshold = 0) {
## 'directory' is a character vector of length 1 indicating
## the location of the CSV files
## 'threshold' is a numeric vector of length 1 indicating the
## number of completely observed observations (on all
## variables) required to compute the correlation between
## nitrate and sulfate; the default is 0
## Return a numeric vector of correlations
## NOTE: Do not round the result!
id <- 1:332
result <- c()
for (i in id) {
i <- formatC(i,digits = 2,format = "d",flag = 0)
fileName <- paste(directory,"/",i,".csv",sep ="")
file <- read.csv(fileName)
vec <- complete.cases(file)
complete_file <- file[vec,]
if(nrow(complete_file)>threshold){
result <- c(result,cor(complete_file$nitrate,complete_file$sulfate))
}
}
result
}
corr("/Users/randyjp/Projects/RCoursera/specdata",400)
source("corr.R")
source("complete.R")
cr <- corr("specdata", 150)
head(cr)
cr <- corr("specdata", 150)
cr <- corr("/Users/randyjp/Projects/RCoursera/specdata", 150)
head(cr)
summary(cr)
cr <- corr("/Users/randyjp/Projects/RCoursera/specdata", 400)
head(cr)
summary(cr)
cr <- corr("/Users/randyjp/Projects/RCoursera/specdata")
summary(cr)
length(cr)
library(MASS)
library(ISRL)
install.packages("ISLR")
library(ISRL)
library(ISRL)
install.packages("ISLR")
fix(Boston)
#library(MASS)
fix(Boston)
#fix(Boston)
install.packages("X11")
lm.fit = lm(medv~lstat, data = Boston)
lm.fit = lm(medv~lstat, data = Boston)
?Boston
lm.fit
summary(lm.fit)
coef(lm.fit)
#library(MASS)
confint(lm.fit)
predict(lm.fit,data.frame(lstat=c(5,10,15)))
predict(lm.fit,data.frame(lstat=c(5,10,15)), interval = "confidence")
predict(lm.fit,data.frame(lstat=c(5,10,15)), interval = "prediction")
abline(lm.fit,lwd=3)
plot(lstat)
attach(Boston)
plot(lstat)
abline(lm.fit,lwd=3)
plot(lstat,medv)
abline(lm.fit,lwd=3)
abline(lm.fit,lwd=3, col="red")
#the starts next to the model mean the significance of the attribute
plot(lstat,medv,pch=20)
plot(lstat,medv,pch="+")
plot(lstat,medv,pch=1:20)
?Boston
lm.fit2 = lm(medv~lstat+age)
summary(lm.fit2)
lm.fit3 = lm(medv~.)
lm.fit3 = lm(medv~., data=Boston)
summary(lm.fit3)
lm.fit4 = lm(medv~.-age, data=Boston)
summary(lm.fit4)
library(MASS)
install.packages("ISRL")
library("ISRL")
?Boston
fix(Boston)
install.packages("ISRL")
library("ISRL")
library("ISRL")
library("ISRL")
sum(lm(medv~lstat,data = Boston))
summary(lm(medv~lstat,data = Boston))
lm.fit = lm(medv~lstat+I(lstat^2)) #to allow the raising of lstat to the power of 2
lm.fit = lm(medv~lstat+I(lstat^2),data = Boston) #to allow the raising of lstat to the power of 2
summary(lm.fit)
attach(Boston)
lm.fit2 = lm(medv~lstat)
anova(lm.fit,lm.fit2)
summary(lm.fit5)
lm.fit5= lm(medv~poly(lstat,5))
summary(lm.fit5)
lm.fit6= lm(medv~poly(lstat,6))
summary(lm.fit6)
summary(lm(medv~log(rm))
summary(lm(medv~log(rm))
summary(lm(medv~log(rm)))
?Carseats
??Carseats
names(Carseats)
insertClassMethods(ISRL)
install.packages("ISRL")
library(ISRL)
?Smarket
summary(Smarket)
source('~/RIT/KDD/Lab1/lab1Script.R', echo=TRUE)
setwd("~/RIT/KDD/Lab1")
source('~/RIT/KDD/Lab1/lab1Script.R', echo=TRUE)
fix(collage)
rownames(college) = college[,1]
rownames(college) = college[,1]
fix(collage)
rownames(college)=college[0,1]
fix(college)
rownames(college)=college[,1]
fix(college)
college = college[,-1]
fix(college)
summary(college)
pairs(college[,1:10])
#side by side boxplots of Outstate vs Private
attach(college)
plot(Outstate,Private)
?plot
?rep
source('~/RIT/KDD/Lab1/lab1Script.R', echo=TRUE)
#Create a qualitvative var saying if top students(10% of their highschool) are more than 50%
Elite = rep("No",nrow(college))
Elite[Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college,Elite)
sum(college)
#Create a qualitvative var saying if top students(10% of their highschool) are more than 50%
Elite = rep("No",nrow(college))
Elite[Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college,Elite)
summary(college)
pairs(Outstate,Elite)
#Create a qualitvative var saying if top students(10% of their highschool) are more than 50%
Elite = rep("No",nrow(college))
Elite[Top10perc > 50] = "Yes"
Elite = as.factor(Elite)
college = data.frame(college,Elite)
summary(college)
pairs(Outstate,Elite)
pairs(Outstate,college$Elite)
plot(Outstate,college$Elite)
plot(Outstate,Elite)
hist(PhD,Outstate,Apps)
?hist
hist(PhD,plot = TRUE)
hist(PhD,plot = TRUE)
#Drawing some histgrams
par(mfrow=c(2,2)) # divide the screen into 4
hist(PhD,plot = TRUE)
hist(Apps,plot = TRUE)
hist(Outstate,plot = TRUE)
hist(Expend,plot = TRUE)
range(Enroll)
mean(Enroll)
sd(Enroll)
trimEnroll = Enroll[-100:200]
trimEnroll = Enroll[100:200]
trimEnroll
trimEnroll = Enroll[-(100:200)]
trimEnroll
Elite = as.factor(Elite)
fix(trimEnroll)
count.fields(trimEnroll)
range(trimEnroll) #35-6392
mean(trimEnroll) #779.973
sd(trimEnroll) #929.1762
setwd("~/RIT/KDD/Lab1")
#Setting workind directory?
setwd("~/RIT/KDD/Lab2")
#reading the file
auto <- read.csv("Auto.csv",header = TRUE,na.strings = "?")
# Part I starts here
#(a) Produce a scatterplot matrix, which includes all of the variables in the data set.
plot(auto)
#(b) Compute the matrix of correlations between the variables using the function cor()
#rownames(auto) = auto[,9]
auto = auto[,-9]
cor(auto)
#(c)Use the lm() function to perform a multiple linear regression with mpg as the
#response and all other variables except name as the predictors. Use the summary()
#function to print the results.
linearModel <- lm(mpg~.,data = auto)
summary(linearModel)
summary(lm(mpg~I(weight^2)))
